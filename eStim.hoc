// procedure that calculates extracellular voltages
// parameters: diameter, stim PW, stim AMP
load_file("nrngui.hoc")
load_file("import_voltages.hoc")
load_file("thresh.hoc")


// ----------------------- Global Stuff -------------------------------------
rhoa = 100      // axial resistivity (ohm-cm)
Vo = -65        //initial potential

tstop = 10
dt = 0.001

DELAY = 1       //in ms

strdef s1
s1 = "dummyfile.txt"
objref voltages
voltages = import_v(s1)

N_NODES = voltages.size()    //number of nodes
create node[N_NODES]
objref nodes[N_NODES]
for i = 0, N_NODES-1 {
	node[i]{
		nseg = 1
		diam = 0.7*D  // node diameter (um)
		L    = 1		 // node length (um)
		Ra   = rhoa*( (L + INL) / L )  // trick to account for internodal resistance
		cm   = 1						// specific membrane capacitance (uF/cm^2)			
		insert hh      		
		insert extracellular   // for extracellular stimulation 
	}
	node[i] nodes[i] = new SectionRef()
}




// initializing axon
// NEED TO PASS IN NODES, D, INL, 
proc initialize(){
  INL = 100*%2
  for i=0, N_NODES-2 {
		connect $o1[i](1), $o1[i+1](0)
  }
	finitialize(Vo)
}

// extracellular potentials
// NEED TO PASS IN NODES & VOLTAGES
proc potential_field(){
	for i=0, N_NODES-1{
		node[i].e_extracellular(0.5) = voltages.x[i]
		// $o1 node
		// $o2 voltages	
	}
}

// time integrate with constant time step size
// NEED TO PASS IN NODES & VOLTAGES
proc stimulate(){
	finitialize(Vo)
	while (t<tstop) {	
		potential_field()
	  fadvance()		
	}	
}

proc eStimulate() { localobj x_axon, phi_e, dummystim, nodes
	// $o1: extracellular voltages
	// $&o2: node section references
	// $4: PW
	// $5: AMP

	// NEED TO ESTABLISH AXON DIMENSIONS (length, diameter, #nodes)
	//Fiber
	D = %3 			// fiber diameter in um
	INL = 100*D     //MOVED TO INITIALIZE

	//Stimulus
	PW = $4         // pulse width in ms
	AMPLITUDE = $5  //cathodic, check units!



// ----------------------- Creating Axon -------------------------------------
	create node[N_NODES]
	node nodes = new SectionRef() // correct syntax?
	initialize()

	//for keeping track of node positions and Ve at nodes
	x_axon = new Vector(N_NODES,0)
	phi_e = new Vector(N_NODES,0)
	for i=0, N_NODES-1{
			x_axon.x[i] = -(N_NODES-1)/2*INL + INL*i   //centered at middle node. Only for odd N_NODES
	}
	x_axon.mul(1e-3) //convert from um to mm

	// for recording membrane potentials
	objref vol_mem[N_NODES]
	for i=0, N_NODES-1{
		vol_mem[i] = new Vector(tstop/dt,0)
	  	vol_mem[i].record(&node[i].v(0.5))	
	}

	//dummy stimulus only to control waveform parameters
	//The 'dummy' section has nothing to do with the fiber
	create dummy
	dummy dummystim = new IClamp(0.5)	// 0.5 is the normalized location
	dummystim.del = DELAY
	dummystim.dur = PW
	dummystim.amp = AMPLITUDE

	stimulate()
}




// ----------------------- Debugging -----------------------------------------
//stimulate()
//print(vol_mem[10].max())
//AMPLITUDE = AMPLITUDE - 25e-3
//dummystim.amp = AMPLITUDE
//stimulate()
//print(vol_mem[10].max())

/*
objref g, rp
g = new Graph()
g.size(0,tstop,Vo-10,40)
print(vol_mem[10].max)
vol_mem[10].plot(g,dt)
vol_mem[20].plot(g,dt,2,1)
rp = new RangeVarPlot("v")
node[0] rp.begin(0)
node[20] rp.end(1)
g.addobject(rp)