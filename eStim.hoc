// procedure that calculates extracellular voltages
// parameters: diameter, stim PW, stim AMP
load_file("nrngui.hoc")
load_file("import_voltages.hoc")


// ----------------------- Global Stuff -------------------------------------
// NEED TO ESTABLISH AXON DIMENSIONS (length, diameter, #nodes)
//Fiber
D = 20			// fiber diameter in um
INL = 100*D     //MOVED TO INITIALIZE
rhoa = 100      // axial resistivity (ohm-cm)
Vo = -65        //initial potential

dt = 0.2

strdef s1
s1 = "testfile.txt"
objref voltages
voltages = import_v(s1)

N_NODES = voltages.nrow()    //number of nodes
create node[N_NODES]
objref nodes[N_NODES]
for j = 0, N_NODES-1 {
	node[j]{
		nseg = 1
		diam = 0.7*D  // node diameter (um)
		L    = 1		 // node length (um)
		Ra   = rhoa*( (L + INL) / L )  // trick to account for internodal resistance
		cm   = 1						// specific membrane capacitance (uF/cm^2)			
		insert hh      		
		insert extracellular   // for extracellular stimulation 
	}
	node[j] nodes[j] = new SectionRef()
}




// initializing axon
// NEED TO PASS IN NODES, D, INL, 
proc initialize(){
  for j=0, N_NODES-2 {
		connect $&o1[j](1), $&o1[j+1](0)
  }
	finitialize(Vo)
}

// extracellular potentials
proc potential_field(){
	// $&o1 node
	// $o2 voltages	
	for j=0, N_NODES-1{
		$&o1[j].e_extracellular(0.5) = voltages.x[j] // CONVERT TO MATRICES
		
	}
}

// time integrate with constant time step size
// NEED TO PASS IN NODES & VOLTAGES
proc stimulate(){ local count
	// $o1 node
	// $o2 voltages
	count = 0
	finitialize(Vo)
	while (count<$o2.ncol) {	
		potential_field($o1, $o2)
	  fadvance()		
	}	
}

obfunc eStimulate() { localobj vol_mem
	// $o1: extracellular voltages
	// $o2: node section references

// ----------------------- Creating Axon -------------------------------------
	initialize($o2)
	// for recording membrane potentials
	vol_mem = new List()
	for i=0, N_NODES-1{
		vol_mem[i] = new Vector($o1.ncol,0)
	  	vol_mem[i].record($o2.v(0.5))	
	}
	stimulate($o1, $o2)
}




// ----------------------- Debugging -----------------------------------------
//stimulate()
//print(vol_mem[10].max())
//AMPLITUDE = AMPLITUDE - 25e-3
//dummystim.amp = AMPLITUDE
//stimulate()
//print(vol_mem[10].max())

/*
objref g, rp
g = new Graph()
g.size(0,tstop,Vo-10,40)
print(vol_mem[10].max)
vol_mem[10].plot(g,dt)
vol_mem[20].plot(g,dt,2,1)
rp = new RangeVarPlot("v")
node[0] rp.begin(0)
node[20] rp.end(1)
g.addobject(rp)