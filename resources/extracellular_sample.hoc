// Demonstration of extracellular stimulation
// Leo Medina 2013-10-28 
// Updated by Aman Aberra 2017-09-04
load_file("nrngui.hoc")

// ----------------------- Global Variables ----------------------------------

//Fiber
D = 12          // fiber diameter in um
N_NODES = 21    //number of nodes
INL = 100*D     //internodal length in um
rhoa = 100      // axial resistivity (ohm-cm)
Vo = -65        //initial potential

//Stimulus
PW = 0.1        // pulse width in ms
DELAY = 1       //in ms
E2F_DIST = 1    //electrode to fiber distance in mm
AMPLITUDE = -4e-1  //cathodic, check units!
tstop = 10
dt = 0.001

//medium
sigma_e = 2e-4 //S/mm

// ----------------------- Creating Axon -------------------------------------
create node[N_NODES]
// initializing axon
proc initialize(){
  for i=0, N_NODES-1 {
		node[i]{
			nseg = 1
			diam = 0.7*D  // node diameter (um)
			L    = 1		 // node length (um)
			Ra   = rhoa*( (L + INL) / L )  // trick to account for internodal resistance
			cm   = 1							 // specific membrane capacitance (uF/cm^2)			
			//insert hh      		
			insert extracellular   // for extracellular stimulation 
		}
	}

  for i=0, N_NODES-2 {
		connect node[i](1), node[i+1](0)
  }
	finitialize(Vo)
}
initialize()

//for keeping track of node positions and Ve at nodes
objref x_axon, phi_e
x_axon = new Vector(N_NODES,0)
phi_e = new Vector(N_NODES,0)
for i=0, N_NODES-1{
		x_axon.x[i] = -(N_NODES-1)/2*INL + INL*i   //centered at middle node. Only for odd N_NODES
}
x_axon.mul(1e-3) //convert from um to mm

// for recording membrane potentials
objref vol_mem[N_NODES]
for i=0, N_NODES-1{
	vol_mem[i] = new Vector(tstop/dt,0)
  vol_mem[i].record(&node[i].v(0.5))	
}

//dummy stimulus only to control waveform parameters
//The 'dummy' section has nothing to do with the fiber
objref dummystim
create dummy
dummy dummystim = new IClamp(0.5)	// 0.5 is the normalized location
dummystim.del = DELAY
dummystim.dur = PW
dummystim.amp = AMPLITUDE


// extracellular potentials
proc potential_field(){
	for i=0, N_NODES-1{
		r = sqrt(x_axon.x[i]^2+E2F_DIST^2) //in mm. Note that we are assuming that the electrode is at position (0,0,E2F_DIST) i.e. over the middle node
		phi_e.x[i] = dummystim.i/(4*sigma_e*PI*r) // check units!!!!
		node[i].e_extracellular(0.5) = phi_e.x[i]		
	}
}

// time integrate with constant time step size
proc stimulate(){
	finitialize(Vo)
	while (t<tstop) {	
		potential_field()
	  fadvance()		
	}	
}

// ----------------------- Debugging -----------------------------------------


proc transpose_vol_mem() {
	for i = 0, tstop/dt {
		for j = 0, N_NODES-1 {
			printf()
		}
	}
}

stimulate()
transpose_vol_mem()

objref 
for i=0, tstop/dt{

}

/*print(vol_mem[10].max())
AMPLITUDE = AMPLITUDE - 25e-3
dummystim.amp = AMPLITUDE
stimulate()
print(vol_mem[10].max())

print N_NODES
printf("nodes: %d", vol_mem.size)
printf("timesteps: %d", vol_mem[1].size)
print(tstop/dt)

/*
objref g, rp
g = new Graph()
g.size(0,tstop,Vo-10,40)
print(vol_mem[10].max)
vol_mem[10].plot(g,dt)
vol_mem[20].plot(g,dt,2,1)
rp = new RangeVarPlot("v")
node[0] rp.begin(0)
node[20] rp.end(1)
g.addobject(rp)